@import "src/ui/styles/vars";
@import "src/ui/styles/functions";

@mixin color-states-mixin($type, $color, $background-color, $border-color: transparent) {
    color: $color;
    border-color: $border-color;
    @if ($type == "primary" or $type == "secondary") {
        background-color: $background-color;
    }
    &.pale {
        color: pale-primary($color);
        border-color: pale-primary($border-color);
        @if ($type == "primary" or $type == "secondary") {
            background-color: pale-primary($background-color);
        }
    }
    &:hover,
    &.hover {
        color: $color;
        @if ($type == "primary") {
            border-color: hover-invert($border-color);
            background-color: hover-invert($background-color);
        } @else {
            border-color: hover-primary($border-color);
            background-color: hover-primary($background-color);
        }
    }
    &:active {
        color: $color;
        border-color: pressing-primary($border-color);
        background-color: pressing-primary($background-color);
    }
    &.focused {
        color: $color;
        border-color: focus-primary($border-color);
        background-color: focus-primary($background-color);
    }
    &:disabled,
    &.disabled {
        color: disabled-primary($color);
        border-color: disabled-primary($border-color);
        @if ($type == "primary" or $type == "secondary") {
            background-color: disabled-primary($background-color);
        }
    }
}

@mixin color-invert-states-mixin($type, $color, $background-color, $border-color: transparent) {
    color: $color;
    border-color: $border-color;
    @if ($type == "primary" or $type == "secondary") {
        background-color: $background-color;
    }
    &.pale {
        color: pale-invert($color);
        border-color: pale-invert($border-color);
        @if ($type == "primary" or $type == "secondary") {
            background-color: pale-invert($background-color);
        }
    }
    &:hover,
    &.hover {
        color: $color;
        @if ($type == "primary") {
            border-color: hover-primary($border-color);
            background-color: hover-primary($background-color);
        } @else {
            border-color: hover-invert($border-color);
            background-color: hover-invert($background-color);
        }
    }
    &:active {
        color: $color;
        border-color: pressing-invert($border-color);
        background-color: pressing-invert($background-color);
    }
    &.focused {
        color: $color;
        border-color: focus-invert($border-color);
        background-color: focus-invert($background-color);
    }
    &:disabled,
    &.disabled {
        color: disabled-invert($color);
        border-color: disabled-invert($border-color);
        @if ($type == "primary" or $type == "secondary") {
            background-color: disabled-invert($background-color);
        }
    }
}

@mixin color-types-mixin(
    $color-text-primary,
    $color-text-secondary,
    $color-background-primary,
    $color-background-secondary,
    $color-border,
    $invert: "none"
) {
    &.primary {
        @if ($invert == "invert") {
            @include color-invert-states-mixin(
                "primary",
                $color-text-primary,
                $color-background-primary
            );
        } @else {
            @include color-states-mixin("primary", $color-text-primary, $color-background-primary);
        }
    }

    &.secondary {
        @if ($invert == "invert") {
            @include color-invert-states-mixin(
                "secondary",
                $color-text-secondary,
                $color-background-secondary
            );
        } @else {
            @include color-states-mixin(
                "secondary",
                $color-text-secondary,
                $color-background-secondary
            );
        }
    }

    &.tertiary {
        @if ($invert == "invert") {
            @include color-invert-states-mixin(
                "tertiary",
                $color-text-secondary,
                $color-background-secondary
            );
        } @else {
            @include color-states-mixin(
                "tertiary",
                $color-text-secondary,
                $color-background-secondary
            );
        }
    }

    &.outlined {
        border: 1px solid currentColor;
        padding: 0 calc(var(--current-padding) - 1px);
        @if ($invert == "invert") {
            @include color-invert-states-mixin(
                "outlined",
                $color-text-secondary,
                $color-background-secondary,
                $color-border
            );
        } @else {
            @include color-states-mixin(
                "outlined",
                $color-text-secondary,
                $color-background-secondary,
                $color-border
            );
        }
    }
}
